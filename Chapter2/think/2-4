a.<2,1><3,1><8,6><8,1><6,1>
b.of course the reverse array! Like this, n,n-1,n-2,...,1. It has n(n-1)/2 inversions.
c.when inversion number is 0, the runtime is n-1
accordingly, 1 - n-1+1
2 - n-1+2
...
k - n-1+k
In a word, linear, 1:1 increment speed.
Prove:Thinking of MERGE, we only need to count A from n/2 pile and B from n/2 pile. Suppose A is sorted and counted in theta(n/2 * lg n/2), B as well. Then we do the same thing in MERGE, but remember to note any position where A is greater than B, the notable thing is we can calculate the inversions for that A without checking it against the rest of B but just use the number of B put down (and we know this! The only price is an extra variable.) . Thus we can still manage in theta(nlgn). At last, we need to check the initial condition where there is only 4, 4lg4 is 8, we just bruteforcely use 6 steps to iterate it and everything is fine afterward.

