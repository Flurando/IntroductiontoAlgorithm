a. n/k * theta(k^2) = theta(nk)
b. Just apply MERGE to each 2 in the piles and recursively do until there is only one pile left
c. n/k piles of k long
to sort k elements we need at most k^2/2 + k/2 - 1 steps, so for n/k piles we need nk/2 + n/2 - n/k steps
to merge 2 p-long piles, we need 2p - 1 steps
thus for n/k k-long, we need lg(n/k) * (n-1) steps
in total, we need nk/2 + n/2 - n/k + lg(n/k) * (n-1) steps
which is exactly theta nk + nlg(n/k)
while the standard merge sort need theta nlgn, which is actually (n-1)lgn
consider the two theta, we want theta nk = theta nlgk, that is theta k = theta lgk, so theta k/lgk = theta 1
(I still don't know the maximum of k...)
d.choose k by experienment, considering both memory and time consumption
