a.
we still need to prove that (1) BUBBLESORT is true when n=1,2 (2) if BUBBLESORT is true when n=k (k<A.length), we have BUBBLESORT is true when tackling the k+1 th element, leading to the correctness of n=k+1

b.
Start: when j = A.length, check if the last element in A is smaller than the last but second element, if fo, exchange them. After the action, we know that the last element in A is absolutely bigger or equal to the last but second element in A.
Continue: if j > k are already been sorted, we head over to k, then since the A[k] has already been the smallest among A[k] A[k+1] A[k+2] ... A[A.length], we know after the check with A[k-1], A[k-1] would be the smallest among A[k-1] A[k] A[k+1] A[k+2] ... A[A.length]! Thus, the nochanging stuff is preserved.
End: At last, we know the ith in A has been put in the right position. Thus, the recursion of Line 2-4 is correct.

c.
Start: when i = 1, we successfully make sure A[1] would hold the smallest in A
Continue: if the 1, ..., j(j>=1) elements have already been put in the right positions, when we start with A[j], we make sure that A[j] would hold the smallest among j, j+1, ..., A.length slots.
End: After all operations, we make sure 1 holds the smallest smong all, 2 holds the smallest among all but 1, 3 holds the smallest among all but 1, 2, ..., A.length-1 holds the smallest among A.length-1, A.length, which is already a sorted version.

d.
Under the worst circumstances, it needs 2*((n-1) + (n-2) + ... + 1) = n(n-1) steps, noting as theta(n^2) sometimes. While the insertion sorting needs 2*(1 + 2 + ... + (n-1)), they are the same.